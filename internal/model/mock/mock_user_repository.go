// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Himatro2021/API/internal/model (interfaces: UserRepository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/Himatro2021/API/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CheckIsInvitationExists mocks base method.
func (m *MockUserRepository) CheckIsInvitationExists(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIsInvitationExists", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckIsInvitationExists indicates an expected call of CheckIsInvitationExists.
func (mr *MockUserRepositoryMockRecorder) CheckIsInvitationExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIsInvitationExists", reflect.TypeOf((*MockUserRepository)(nil).CheckIsInvitationExists), arg0, arg1)
}

// CreateInvitation mocks base method.
func (m *MockUserRepository) CreateInvitation(arg0 context.Context, arg1 *model.UserInvitation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvitation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInvitation indicates an expected call of CreateInvitation.
func (mr *MockUserRepositoryMockRecorder) CreateInvitation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvitation", reflect.TypeOf((*MockUserRepository)(nil).CreateInvitation), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockUserRepository) GetUserByEmail(arg0 context.Context, arg1 string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepositoryMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserByID mocks base method.
func (m *MockUserRepository) GetUserByID(arg0 context.Context, arg1 int64) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepositoryMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepository)(nil).GetUserByID), arg0, arg1)
}

// GetUserInvitationByInvitationCode mocks base method.
func (m *MockUserRepository) GetUserInvitationByInvitationCode(arg0 context.Context, arg1 string) (*model.UserInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInvitationByInvitationCode", arg0, arg1)
	ret0, _ := ret[0].(*model.UserInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInvitationByInvitationCode indicates an expected call of GetUserInvitationByInvitationCode.
func (mr *MockUserRepositoryMockRecorder) GetUserInvitationByInvitationCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInvitationByInvitationCode", reflect.TypeOf((*MockUserRepository)(nil).GetUserInvitationByInvitationCode), arg0, arg1)
}

// IsEmailAlreadyInvited mocks base method.
func (m *MockUserRepository) IsEmailAlreadyInvited(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmailAlreadyInvited", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEmailAlreadyInvited indicates an expected call of IsEmailAlreadyInvited.
func (mr *MockUserRepositoryMockRecorder) IsEmailAlreadyInvited(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmailAlreadyInvited", reflect.TypeOf((*MockUserRepository)(nil).IsEmailAlreadyInvited), arg0, arg1)
}

// MarkInvitationStatus mocks base method.
func (m *MockUserRepository) MarkInvitationStatus(arg0 context.Context, arg1 *model.UserInvitation, arg2 model.InvitationStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkInvitationStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkInvitationStatus indicates an expected call of MarkInvitationStatus.
func (mr *MockUserRepositoryMockRecorder) MarkInvitationStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkInvitationStatus", reflect.TypeOf((*MockUserRepository)(nil).MarkInvitationStatus), arg0, arg1, arg2)
}

// Register mocks base method.
func (m *MockUserRepository) Register(arg0 context.Context, arg1 *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockUserRepositoryMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserRepository)(nil).Register), arg0, arg1)
}
