// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Himatro2021/API/internal/model (interfaces: AuthUsecase)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/Himatro2021/API/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthUsecase is a mock of AuthUsecase interface.
type MockAuthUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUsecaseMockRecorder
}

// MockAuthUsecaseMockRecorder is the mock recorder for MockAuthUsecase.
type MockAuthUsecaseMockRecorder struct {
	mock *MockAuthUsecase
}

// NewMockAuthUsecase creates a new mock instance.
func NewMockAuthUsecase(ctrl *gomock.Controller) *MockAuthUsecase {
	mock := &MockAuthUsecase{ctrl: ctrl}
	mock.recorder = &MockAuthUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUsecase) EXPECT() *MockAuthUsecaseMockRecorder {
	return m.recorder
}

// LoginByEmailAndPassword mocks base method.
func (m *MockAuthUsecase) LoginByEmailAndPassword(arg0 context.Context, arg1, arg2 string) (*model.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginByEmailAndPassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginByEmailAndPassword indicates an expected call of LoginByEmailAndPassword.
func (mr *MockAuthUsecaseMockRecorder) LoginByEmailAndPassword(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginByEmailAndPassword", reflect.TypeOf((*MockAuthUsecase)(nil).LoginByEmailAndPassword), arg0, arg1, arg2)
}
