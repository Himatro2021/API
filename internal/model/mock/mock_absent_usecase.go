// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Himatro2021/API/internal/model (interfaces: AbsentUsecase)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/Himatro2021/API/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockAbsentUsecase is a mock of AbsentUsecase interface.
type MockAbsentUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAbsentUsecaseMockRecorder
}

// MockAbsentUsecaseMockRecorder is the mock recorder for MockAbsentUsecase.
type MockAbsentUsecaseMockRecorder struct {
	mock *MockAbsentUsecase
}

// NewMockAbsentUsecase creates a new mock instance.
func NewMockAbsentUsecase(ctrl *gomock.Controller) *MockAbsentUsecase {
	mock := &MockAbsentUsecase{ctrl: ctrl}
	mock.recorder = &MockAbsentUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAbsentUsecase) EXPECT() *MockAbsentUsecaseMockRecorder {
	return m.recorder
}

// CreateAbsentForm mocks base method.
func (m *MockAbsentUsecase) CreateAbsentForm(arg0 context.Context, arg1 *model.CreateAbsentInput) (*model.AbsentForm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAbsentForm", arg0, arg1)
	ret0, _ := ret[0].(*model.AbsentForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAbsentForm indicates an expected call of CreateAbsentForm.
func (mr *MockAbsentUsecaseMockRecorder) CreateAbsentForm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAbsentForm", reflect.TypeOf((*MockAbsentUsecase)(nil).CreateAbsentForm), arg0, arg1)
}

// CreateConfirmationOnAbsentForm mocks base method.
func (m *MockAbsentUsecase) CreateConfirmationOnAbsentForm(arg0 context.Context, arg1 int64, arg2, arg3 string) (*model.AbsentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfirmationOnAbsentForm", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*model.AbsentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfirmationOnAbsentForm indicates an expected call of CreateConfirmationOnAbsentForm.
func (mr *MockAbsentUsecaseMockRecorder) CreateConfirmationOnAbsentForm(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfirmationOnAbsentForm", reflect.TypeOf((*MockAbsentUsecase)(nil).CreateConfirmationOnAbsentForm), arg0, arg1, arg2, arg3)
}

// FillAbsentFormByAttendee mocks base method.
func (m *MockAbsentUsecase) FillAbsentFormByAttendee(arg0 context.Context, arg1 int64, arg2, arg3 string) (*model.AbsentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FillAbsentFormByAttendee", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*model.AbsentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FillAbsentFormByAttendee indicates an expected call of FillAbsentFormByAttendee.
func (mr *MockAbsentUsecaseMockRecorder) FillAbsentFormByAttendee(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FillAbsentFormByAttendee", reflect.TypeOf((*MockAbsentUsecase)(nil).FillAbsentFormByAttendee), arg0, arg1, arg2, arg3)
}

// GetAbsentFormByID mocks base method.
func (m *MockAbsentUsecase) GetAbsentFormByID(arg0 context.Context, arg1 int64) (*model.AbsentForm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAbsentFormByID", arg0, arg1)
	ret0, _ := ret[0].(*model.AbsentForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAbsentFormByID indicates an expected call of GetAbsentFormByID.
func (mr *MockAbsentUsecaseMockRecorder) GetAbsentFormByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAbsentFormByID", reflect.TypeOf((*MockAbsentUsecase)(nil).GetAbsentFormByID), arg0, arg1)
}

// GetAbsentResultByFormID mocks base method.
func (m *MockAbsentUsecase) GetAbsentResultByFormID(arg0 context.Context, arg1 int64) (*model.AbsentResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAbsentResultByFormID", arg0, arg1)
	ret0, _ := ret[0].(*model.AbsentResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAbsentResultByFormID indicates an expected call of GetAbsentResultByFormID.
func (mr *MockAbsentUsecaseMockRecorder) GetAbsentResultByFormID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAbsentResultByFormID", reflect.TypeOf((*MockAbsentUsecase)(nil).GetAbsentResultByFormID), arg0, arg1)
}

// GetAllAbsentForm mocks base method.
func (m *MockAbsentUsecase) GetAllAbsentForm(arg0 context.Context, arg1, arg2 int) ([]model.AbsentForm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAbsentForm", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.AbsentForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAbsentForm indicates an expected call of GetAllAbsentForm.
func (mr *MockAbsentUsecaseMockRecorder) GetAllAbsentForm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAbsentForm", reflect.TypeOf((*MockAbsentUsecase)(nil).GetAllAbsentForm), arg0, arg1, arg2)
}

// UpdateAbsentForm mocks base method.
func (m *MockAbsentUsecase) UpdateAbsentForm(arg0 context.Context, arg1 int64, arg2 *model.CreateAbsentInput) (*model.AbsentForm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAbsentForm", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.AbsentForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAbsentForm indicates an expected call of UpdateAbsentForm.
func (mr *MockAbsentUsecaseMockRecorder) UpdateAbsentForm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAbsentForm", reflect.TypeOf((*MockAbsentUsecase)(nil).UpdateAbsentForm), arg0, arg1, arg2)
}

// UpdateAbsentListByAttendee mocks base method.
func (m *MockAbsentUsecase) UpdateAbsentListByAttendee(arg0 context.Context, arg1 int64, arg2 *model.UpdateAbsentListInput) (*model.AbsentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAbsentListByAttendee", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.AbsentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAbsentListByAttendee indicates an expected call of UpdateAbsentListByAttendee.
func (mr *MockAbsentUsecaseMockRecorder) UpdateAbsentListByAttendee(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAbsentListByAttendee", reflect.TypeOf((*MockAbsentUsecase)(nil).UpdateAbsentListByAttendee), arg0, arg1, arg2)
}
